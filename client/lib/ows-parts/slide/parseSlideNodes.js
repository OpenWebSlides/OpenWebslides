import _ from 'lodash';
import parseContentItemNodes, { processContentItems } from '../content-item/parseContentItemNodes';
import { generateSlideId } from '../helpers/generateIds';

function parseSlideNodes(
  ancestorNode,
  assetLinks,
  slidesById,
  contentItemsById,
  deckId, // #TODO remove these two parameters
  slideSequence,
) {
  const copiedSlidesById = { ...slidesById };
  let copiedContentItemsById = { ...contentItemsById };
  let copiedSlideSequence = slideSequence;

  const slideIds = [];
  let contentItemIds;
  let newContentItemsById;
  let slideWrapperNode;
  let contentItemNodesParentNode;
  let slide;
  let slideId;
  let slideLevel;
  let contentItemSequence;

  let slideNodes;

  if (_.includes(ancestorNode.className.split(' '), 'ows_deck')) { // New save format
    slideNodes = ancestorNode.getElementsByClassName('ows_slide');
  }
  else { // Old save format
    slideNodes = ancestorNode.getElementsByClassName('slide');
  }

  // If there are no existing slides present, return a single empty one for the user to start with.
  if (slideNodes.length === 0) {
    slideId = generateSlideId(deckId, copiedSlideSequence);
    copiedSlideSequence += 1;
    slideIds.push(slideId);
    copiedSlidesById[slideId] = {
      id: slideId,
      meta: {},
      level: 0,
      contentItemIds: [],
      contentItemSequence: 0,
    };
  }
  else {
    [...slideNodes].forEach((slideNode) => {
      // #TODO get id from HTML or autogenerate
      slideId = generateSlideId(deckId, copiedSlideSequence);
      slideLevel = slideNode.dataset.level ? parseInt(slideNode.dataset.level, 10) : 0;

      // Get the top-level contentItem nodes. In a deck that was generated by our editor, these will
      // be the children of .ows_slide__wrapper, but in a deck from an external source this element
      // might not exist; assume the contentItem nodes are the direct children of the slide node
      // in that case.
      slideWrapperNode = slideNode.getElementsByClassName('ows_slide__wrapper');
      if (slideWrapperNode.length === 1) {
        contentItemNodesParentNode = slideWrapperNode[0];
      }
      else {
        contentItemNodesParentNode = slideNode;
      }

      contentItemSequence = 0;

      ({
        contentItemIds,
        entities: { contentItemsById: newContentItemsById },
        options: { contentItemSequence },
      } = parseContentItemNodes(
        contentItemNodesParentNode,
        assetLinks,
        copiedContentItemsById,
        slideId,
        contentItemSequence,
      ));

      // #TODO move this
      // #TODO verify that all list children are list items
      ({
        contentItemIds,
        entities: { contentItemsById: newContentItemsById },
        options: { contentItemSequence },
      } = processContentItems(
        contentItemIds,
        newContentItemsById,
        slideId,
        contentItemSequence,
      ));

      slide = {
        id: slideId,
        level: slideLevel,
        contentItemIds,
        contentItemSequence,
      };

      copiedSlideSequence += 1;
      slideIds.push(slideId);
      copiedSlidesById[slideId] = slide;
      copiedContentItemsById = {
        ...copiedContentItemsById,
        ...newContentItemsById,
      };
    });
  }

  return {
    slideIds,
    entities: {
      slidesById: copiedSlidesById,
      contentItemsById: copiedContentItemsById,
    },
    options: { copiedSlideSequence }, // #TODO remove this
  };
}

export default parseSlideNodes;
