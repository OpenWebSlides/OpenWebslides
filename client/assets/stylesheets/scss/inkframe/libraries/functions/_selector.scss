
// ------------------
// Selector functions
// ------------------

// Defines functions that can be used to generate CSS selectors.


    // ---------- // ---------- // ---------- // ---------- // ---------- //


    // Function to work around some BEM issues when writing a descendant or child selector
    // for a class that has a modifier (meaning '&__element' cannot be used), and the additional issues that arise
    // when objects are nestable, which requires the use of direct child selectors.
    // This function takes a few parameters describing the current 'situation'
    // and returns the appropriate element selector. This is mostly intended to be used inside mixins,
    // which can be included in a variety of contexts and thus can only determine what kind of selector to use
    // based on the parameters that they have been given.
    // The end goal is to keep selector specificity as low as is possible, within the given constraints.

    @function use-child-selector-only-if-nestable (
        // True if the object is nestable, false if it is not.
        $nestable,
        // The class name of the child that needs to be selected.
        // Should start with '&' if and only if $base-class is not 'false'.
        $class-name,
        // The BEM 'block' name. May equal '&'.
        // Should be 'false' if and only if $class-name does not start with '&'.
        $base-class: false,
        // The value that is used instead of $base-class
        // when $base-class is not given / useable in the current use case.
        // This should always be an actual class name and cannot equal '&'.
        $default-base-class: false
    ) {
        // #TODO validate parameters; particularly the $class-name / $base-class combo

        // If the element is nestable, a child selector should be used
        // to prevent nested elements from accidentally receiving styles not intended for them.
        @if $nestable == true
        {
            // If no base class is given, just return a child selector of the current parent selector.
            @if $base-class == false
            {
                @return '& > #{$class-name}';
            }
            // Otherwise, create a selector staring with the given base class.
            @else
            {
                // First, check if the given $base-class is '&'
                // (which cannot be used in the second part of the child selector).
                @if $base-class == '&'
                {
                    // If this is the case, use $default-base-class instead.
                    $base-class: $default-base-class;
                }

                // If $base-class was not false, $class-name should start with '&'.
                // We can create the child selector by stripping the '&' off $class-name
                // and concatenating it with $base-class.
                @return '& > #{$base-class}#{str-slice($class-name, 2)}';
            }
        }
        // If the element is not nestable, a 'flat' class name should be used
        // (because it has less specificity than a descendant or child selector).
        @else
        {
            // If $base-class is false, $class-name does not start with '&' and can be used directly.
            @if $base-class == false
            {
                @return $class-name;
            }
            // If $base-class is not false, $class-name starts with '&' and should be concatenated with $base-class.
            @else
            {
                // Note: $base-class may equal '&', in which case the code below is actually equal to just $class-name.
                @return '#{$base-class}#{str-slice($class-name, 2)}';
            }
        }
    }


    // ---------- // ---------- // ---------- // ---------- // ---------- //