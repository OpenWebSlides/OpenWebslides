
// --------------------------------
// Text-shadow generating functions
// --------------------------------

// Defines functions that generate values for the 'text-shadow' CSS property.


    // ---------- // ---------- // ---------- // ---------- // ---------- //


    // Returns a string that can be uses as value of the text-shadow property to display a stroke.
    // It does this by generating several text-shadows applied in a circular motion around the text.
    // Warning: large strokes are very slow to generate because of all the math involved.
    // Usage: "text-shadow: unquote(generate-text-shadow-stroke([parameters]));"
    @function generate-text-shadow-stroke (//
        // The color of the stroke.
        $color,
        // The size of the stroke (in em).
        $size: 0.05em,
        // The blur of the stroke (in em). Use this to create a 'glow' around text.
        $blur: 0,
        // Determines the amount of 'steps' that are made when generating the text-shadow in a circle around the text.
        // Try increasing this value if stroke appears 'blocky'.
        $steps-multiplier: 2,
        // An in-between stroke is made every ( 1 / $distance-divider)em.
        // Try decreasing this value if large strokes have 'holes' in them.
        $distance-divider: 20
    ) {
        // Convert stroke size to hundredths of an em for easier calculations.
        $size-hundredths: $size * 100 / 1em;
        // String in which the resulting text-shadow will be stored.
        $text-shadow: '';

        // Making several 'in-between' strokes of different sizes
        // prevents 'holes' from appearing in really large strokes.
        @for $distance-hundredths from 1 through $size-hundredths
        {
            // Convert $distance-hundredths from hundredths of an em to em
            // for use in text-shadow x & y calculations later.
            $distance: $distance-hundredths / 100;

            // Only make in-between strokes every ( 1 / $distance-divider )em;
            // do make sure that a stroke on the exact vanlue of $size is made.
            @if (($distance-hundredths % $distance-divider == 0) or ($distance-hundredths == $size-hundredths))
            {
                // Calculate the amount of steps that should be made at this distance.
                $steps: $distance-hundredths * $steps-multiplier + 6; // #TODO find a better formula
                // Cap steps at 256; don't make strokes that need more steps than this. (Srsly, don't.)
                $steps: min($steps, 256);

                // For each stroke, add text-shadows in a circlular motion around the text with $steps amount of steps
                @for $step from 0 through ($steps - 1)
                {
                    $angle: 360deg / $steps * $step;
                    $h-shadow: cos($angle) * $distance;
                    $v-shadow: sin($angle) * $distance;
                    $text-shadow: $text-shadow + '#{$h-shadow}em #{$v-shadow}em #{$blur} #{$color}' + ', ';
                }
            }
        }

        // Cut off the last ', '
        $text-shadow: str-slice($text-shadow, 0, -3);
        @return $text-shadow;
    }


    // ---------- // ---------- // ---------- // ---------- // ---------- //