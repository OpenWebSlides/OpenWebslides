#%RAML 1.0

traits: !include include/traits.raml
types: !include include/types.raml

title: Open Webslides
description: This is the documentation of the Open Webslides RESTful API.
version: 1
baseUri: http://localhost:5000/api/
mediaType: application/vnd.api+json
documentation:
  - title: Global
    content: |
      The Open Webslides API is based on the [JSON-API](http://jsonapi.org/) specification version 1.0.
  - title: Authentication
    content: |
      The API supports multiple ways of signing up. Users have the possibility of signing up with an
      [email address](#users_post) (and a password), or with one or more [OAuth2 providers](#auth). A user can
      sign up with an email address, and later decide to sign in using an OAuth2 provider to the same account,
      provided that the email address on the OAuth2 provider is equal.

      The API enforces a token authentication scheme using [JSON Web Tokens](https://jwt.io/). Users should
      obtain a valid authentication token from the [Token API](#token) prior to making any authenticated requests.

      Most of the API is inaccessible without being authenticated, with the exception of:
      - publically viewable decks
      - users stripped of their confidential information
  - title: Authorization
    content: |
      A simple rule-based permission system is implemented in the API. A deck can have one of the following _states_:
      - **Public**: visible to everyone (owner, collaborators, users and guests)
      - **Protected**: visible to owner, collaborators and users (but not to guests)
      - **Private**: visible to owner and collaborators (but not to other users)

/users:
  displayName: Users
  description: User API
  get:
    is: [ paginated, filtered: { values: [firstName, lastName, email] } ]
    description: Get all users
    responses:
      200:
        body:
          application/vnd.api+json:
            type: object
            properties:
              data: User[]
            example: !include examples/get_users.json
  post:
    description: Create a new user
    body:
      application/vnd.api+json:
        type: object
        properties:
          data:
            type: object
            properties:
              type:
                description: Resource type, should be set to `users`
                type: string
                required: true
              attributes:
                type: object
                properties:
                  email:
                    description: Email address
                    type: string
                    required: true
                  firstName:
                    description: First name
                    type: string
                    required: true
                  lastName:
                    description: Last name
                    type: string
                    required: false
                  password:
                    description: Password
                    type: string
                    required: true
        example: !include examples/post_user.json
    responses:
      201:
        description: User was successfully created
        body:
          application/vnd.api+json:
            type: object
            properties:
              data: User
            example: !include examples/get_user.json
      422:
        description: Error while creating user
        body:
          application/vnd.api+json:
            type: object
            properties:
              errors: Error[]
            example: !include examples/post_user_422.json
  /{id}:
    uriParameters:
      id: ID
    get:
      description: Get user
      responses:
        200:
          body:
            application/vnd.api+json:
              type: object
              properties:
                data: User
              example: !include examples/get_user.json
        404:
          description: User not found
          body:
            application/vnd.api+json:
              type: object
              properties:
                errors: Error[]
              example: !include examples/get_user_404.json
    put:
      description: See [PATCH](#users__id__patch)
    patch:
      is: [ authenticated ]
      description: Update user
      body:
        application/vnd.api+json:
          type: object
          properties:
            data:
              type: object
              properties:
                id: ID
                type:
                  description: Resource type, should be set to `users`
                  type: string
                  required: true
                attributes:
                  type: object
                  properties:
                    firstName:
                      description: First name
                      type: string
                      required: false
                    lastName:
                      description: Last name
                      type: string
                      required: false
                    password:
                      description: Password
                      type: string
                      required: false

          example: !include examples/patch_user.json
      responses:
        200:
          body:
            application/vnd.api+json:
              type: object
              properties:
                data: User
              example: !include examples/get_user.json
        400:
          description: Error while updating user
          body:
            application/vnd.api+json:
              type: object
              properties:
                errors: Error[]
              example: !include examples/patch_user_400.json
        404:
          description: User not found
          body:
            application/vnd.api+json:
              type: object
              properties:
                errors: Error[]
              example: !include examples/get_user_404.json
        422:
          description: Error while updating user
          body:
            application/vnd.api+json:
              type: object
              properties:
                errors: Error[]
              example: !include examples/patch_user_422.json
    delete:
      is: [ authenticated ]
      description: Delete user
      responses:
        204:
          description: User was successfully deleted
        404:
          description: User not found
          body:
            application/vnd.api+json:
              type: object
              properties:
                errors: Error[]
              example: !include examples/get_user_404.json

/notifications:
  displayName: Notifications
  description: Social feed API
  get:
    is: [ paginated, filtered: { values: [user, deck, eventType] } ]
    description: Get all notifications
    responses:
      200:
        body:
          application/vnd.api+json:
            type: object
            properties:
              data: Notification[]
            example: !include examples/get_notifications.json
  /{id}:
    uriParameters:
      id: ID
    get:
      description: Get notification
      responses:
        200:
          body:
            application/vnd.api+json:
              type: object
              properties:
                data: Notification
              example: !include examples/get_notification.json
        404:
          description: User not found
          body:
            application/vnd.api+json:
              type: object
              properties:
                errors: Error[]
              example: !include examples/get_notification_404.json

/confirmation:
  displayName: Confirmation
  description: Email confirmation API
  post:
    description: Confirm a user's email address using the `confirmation_token` sent by email
    body:
      application/vnd.api+json:
        type: object
        properties:
          data: Confirmation
        example: !include examples/confirmation.json
    responses:
      201:
        description: Returned on successful confirmation
        body:
          application/vnd.api+json:
            type: object
            properties:
              data: User
            example: !include examples/user.json
      400:
        body:
          application/vnd.api+json:
            example: |
              {
                "errors": [
                  {
                    "title": "Confirmation_token is invalid",
                    "detail": "Confirmation_token is invalid",
                    "code": "400",
                    "status": "400"
                  }
                ]
              }

/token:
  displayName: Token
  description: Token API
  post:
    description: Obtain an authentication token
    body:
      application/vnd.api+json:
        type: object
        properties:
          data: Token
        example: !include examples/token.json
    responses:
      201:
        description: Returned on successful authentication
        headers:
          Authorization:
            description: JSON Web Token needed to authenticate (bearer token format)
            example: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE0OTI1OTMxNTcsInN1YiI6MSwidmVyIjoxfQ.cFLhHCC4vFmkGg3FkFaDUA2qnk-RxWkz_pt2SY8VOcQ
        body:
          application/vnd.api+json:
            type: object
            properties:
              data: User
            example: !include examples/user.json
      401:
        description: Returned on incorrect email or password
        body:
          application/vnd.api+json:
            example: |
              {
                "errors": [
                  {
                    "title": "Unauthorized",
                    "detail": "Incorrect email or password",
                    "code": "401",
                    "status": "401"
                  }
                ]
              }
      403:
        description: Returned on account not activated yet
        body:
          application/vnd.api+json:
            example: |
              {
                "errors": [
                  {
                    "title": "Account not confirmed",
                    "detail": "Your account has not been confirmed yet",
                    "code": "403",
                    "status": "403"
                  }
                ]
              }
  delete:
    is: [ authenticated ]
    description: Invalidate all tokens
    responses:
      204:
        description: Returned on successful token invalidation
      401:
        description: Returned on incorrect token

/password:
  displayName: Password
  description: Reset password API
  post:
    description: Request a `reset_password_token` sent by email
    body:
      application/vnd.api+json:
        type: object
        properties:
          data:
            type: object
            properties:
              type:
                description: Should be set to `passwords`
                type: string
              attributes:
                type: object
                properties:
                  email: string
        example: |
          {
            "data": {
              "type": "passwords",
              "attributes": {
                "email": "may_schaden@ryan.io"
              }
            }
          }
    responses:
      204:
        description: Always returned, whether or not the email address was valid
  put:
    description: See [PATCH](#password_patch)
  patch:
    description: Reset a user's password using the `reset_password_token` sent by email
    body:
      application/vnd.api+json:
        type: object
        properties:
          data:
            type: object
            properties:
              type:
                description: Should be set to `passwords`
                type: string
              id:
                description: Required by the JSON-API spec, unused in this endpoint
                type: string
              attributes:
                type: object
                properties:
                  resetPasswordToken:
                    description: Reset password token sent by email
                    type: string
                    example: JaBSxxc2j7XUYLtJzdXi
                  password:
                    description: New password
                    type: string
                    example: abcd1234
        example: |
          {
            "data": {
              "type": "passwords",
              "id": "",
              "attributes" : {
                "resetPasswordToken": "JaBSxxc2j7XUYLtJzdXi",
                "password": "abcd1234"
              }
            }
          }
    responses:
      200:
        description: Returned on successful reset
        body:
          application/vnd.api+json:
            type: object
            properties:
              data: User
            example: !include examples/user.json
      400:
        body:
          application/vnd.api+json:
            example: |
              {
                "errors": [
                  {
                    "title": "Reset_password_token is invalid",
                    "detail": "Reset_password_token is invalid",
                    "code": "400",
                    "status": "400"
                  }
                ]
              }

/auth:
  displayName: OAuth2
  description: OAuth2 API
  /{provider}:
    get:
      description: OAuth2 redirection URL
    /callback:
      get:
        description: OAuth2 Provider callback URL
